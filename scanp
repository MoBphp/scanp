#!/usr/bin/python3
try:
  from optparse import OptionParser
  import nmap, sys, os
  import socket
  from datetime import datetime
except ImportError:
  print("\033[41m[!]\033[0;0m Error in lib")

def banner():
  os.system('clear')
  print('''\033[31m

  ██████  ▄████▄   ▄▄▄       ███▄    █  ██▓███  
\033[32m▒██    ▒ ▒██▀ ▀█  ▒████▄     ██ ▀█   █ ▓██░  ██▒
\033[34m░ ▓██▄   ▒▓█    ▄ ▒██  ▀█▄  ▓██  ▀█ ██▒▓██░ ██▓▒
\033[36m  ▒   ██▒▒▓▓▄ ▄██▒░██▄▄▄▄██ ▓██▒  ▐▌██▒▒██▄█▓▒ ▒
\033[35m▒██████▒▒▒ ▓███▀ ░ ▓█   ▓██▒▒██░   ▓██░▒██▒ ░  ░
\033[33m▒ ▒▓▒ ▒ ░░ ░▒ ▒  ░ ▒▒   ▓▒█░░ ▒░   ▒ ▒ ▒▓▒░ ░  ░
\033[37m░ ░▒  ░ ░  ░  ▒     ▒   ▒▒ ░░ ░░   ░ ▒░░▒ ░
\033[36m░  ░  ░  ░          ░   ▒      ░   ░ ░ ░░
\033[32m      ░  ░ ░            ░  ░         ░
\033[31m         ░
\033[0;0m


  ''')

def scan():
  parser = OptionParser()
  parser.add_option('-s', help='(Doing a basic scan of ports from 1 to 1000 takes a few seconds to complete)', action='store_true')
  parser.add_option('-p', help='(Do a complete scan of all ports from 1 to 65535, it may take a few minutes to complete)')
  option, args = parser.parse_args()
  if option.s:
    if len(sys.argv) >= 3:
      host = sys.argv[2]
      ip = socket.gethostbyname(host)
      t1 = datetime.now()
      print("\033[33m-\033[0;0m" * 60)
      print(f'\033[32m[*]\033[0;0m Scanning {ip} :: {host}')
      print("\033[33m-\033[0;0m" * 60)
      scanp = nmap.PortScanner()
      scanp.scan(host , '1-1000')  
      for host in scanp.all_hosts():
        print(f'\033[32m[*]\033[0;0m State :: {scanp[host].state()}' )    
        print("\033[31m-\033[0;0m" * 60)
    
        for proto in scanp[ip].all_protocols():
          print(f'\033[32m[*]\033[0;0m Protocol :: {proto}')
          print("\033[33m-\033[0;0m" * 60)
      
          phost = scanp[ip][proto].keys()
      
          for port in phost:
            print(f'\033[32m[*]\033[0;0m Port :: {port} :: State:: {scanp[host][proto][port]["state"]}')
      t2 = datetime.now()
      total = t2 - t1
      print("\033[32m-\033[0;0m" * 60)
      print("Scanning Completed in:", total)
      print("\033[31m-\033[0;0m" * 60) 
    else:
      print('\033[41m[!]\033[0;0m Arguments are missing !!')
  if option.p:
      host = sys.argv[2]
      ip = socket.gethostbyname(host)
      t1 = datetime.now()
      print("\033[33m-\033[0;0m" * 60)
      print(f'\033[32m[*]\033[0;0m Scanning Complete in  {ip} :: {host}')
      print("\033[33m-\033[0;0m" * 60)
      scanp = nmap.PortScanner()
      scanp.scan(host , '1-65535')  
      for host in scanp.all_hosts():
        print(f'\033[32m[*]\033[0;0m State :: {scanp[host].state()}' )    
        print("\033[31m-\033[0;0m" * 60)
    
        for proto in scanp[ip].all_protocols():
          print(f'\033[32m[*]\033[0;0m Protocol :: {proto}')
          print("\033[33m-\033[0;0m" * 60)
      
          phost = scanp[ip][proto].keys()
      
          for port in phost:
            print(f'\033[32m[*]\033[0;0m Port :: {port} :: State:: {scanp[host][proto][port]["state"]}')
      t2 = datetime.now()
      total = t2 - t1
      print("\033[32m-\033[0;0m" * 60)
      print("Scanning Completed in:", total)
      print("\033[31m-\033[0;0m" * 60)
try:
  banner()
  scan()
except KeyboardInterrupt:
  print('\033[41m[!]\033[0;0m Stop')
except socket.gaierror:
  print("\033[41m[!]\033[0;0m Hostname not resolved!!\n")
except socket.error:
    print("\033[41m[!]\033[0;0m Server not responding!!")
